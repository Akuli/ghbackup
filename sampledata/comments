[
  {
    "url": "https://api.github.com/repos/Akuli/jou/issues/comments/2642588017",
    "html_url": "https://github.com/Akuli/jou/issues/749#issuecomment-2642588017",
    "issue_url": "https://api.github.com/repos/Akuli/jou/issues/749",
    "id": 2642588017,
    "node_id": "IC_kwDOIsI_Cs6dgrFx",
    "user": {
      "login": "littlewhitecloud",
      "id": 71159641,
      "node_id": "MDQ6VXNlcjcxMTU5NjQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/71159641?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/littlewhitecloud",
      "html_url": "https://github.com/littlewhitecloud",
      "followers_url": "https://api.github.com/users/littlewhitecloud/followers",
      "following_url": "https://api.github.com/users/littlewhitecloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/littlewhitecloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/littlewhitecloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/littlewhitecloud/subscriptions",
      "organizations_url": "https://api.github.com/users/littlewhitecloud/orgs",
      "repos_url": "https://api.github.com/users/littlewhitecloud/repos",
      "events_url": "https://api.github.com/users/littlewhitecloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/littlewhitecloud/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2025-02-07T10:56:24Z",
    "updated_at": "2025-02-07T10:58:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "LOL Getting used to use `->` now because I am learning c# these days.\nI think make them both use `.` would be more simpler in syntax, but I am not sure whether it will make the compiler more complex or not. (Maybe not, in #740)\n> Hard to tell whether we are accessing the memory where a pointer points, which may crash if the pointer is bad\n\n\nOr more difficult when debugging (Also mentioned in #740)",
    "reactions": {
      "url": "https://api.github.com/repos/Akuli/jou/issues/comments/2642588017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/Akuli/jou/issues/comments/2644183314",
    "html_url": "https://github.com/Akuli/jou/issues/749#issuecomment-2644183314",
    "issue_url": "https://api.github.com/repos/Akuli/jou/issues/749",
    "id": 2644183314,
    "node_id": "IC_kwDOIsI_Cs6dmwkS",
    "user": {
      "login": "Moosems",
      "id": 95927277,
      "node_id": "U_kgDOBbe77Q",
      "avatar_url": "https://avatars.githubusercontent.com/u/95927277?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Moosems",
      "html_url": "https://github.com/Moosems",
      "followers_url": "https://api.github.com/users/Moosems/followers",
      "following_url": "https://api.github.com/users/Moosems/following{/other_user}",
      "gists_url": "https://api.github.com/users/Moosems/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Moosems/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Moosems/subscriptions",
      "organizations_url": "https://api.github.com/users/Moosems/orgs",
      "repos_url": "https://api.github.com/users/Moosems/repos",
      "events_url": "https://api.github.com/users/Moosems/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Moosems/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2025-02-07T21:42:43Z",
    "updated_at": "2025-02-07T21:42:43Z",
    "author_association": "NONE",
    "body": "I think there's a way that we can appease both halves of this. A pointer deref prefix vs postfix. If I use `&` as my prefix, for example, `&foo.bar` would be fine to me. The issue is `->` handling both accessing and dereferencing",
    "reactions": {
      "url": "https://api.github.com/repos/Akuli/jou/issues/comments/2644183314/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/Akuli/jou/issues/comments/2646660931",
    "html_url": "https://github.com/Akuli/jou/issues/749#issuecomment-2646660931",
    "issue_url": "https://api.github.com/repos/Akuli/jou/issues/749",
    "id": 2646660931,
    "node_id": "IC_kwDOIsI_Cs6dwNdD",
    "user": {
      "login": "Akuli",
      "id": 18505570,
      "node_id": "MDQ6VXNlcjE4NTA1NTcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/18505570?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Akuli",
      "html_url": "https://github.com/Akuli",
      "followers_url": "https://api.github.com/users/Akuli/followers",
      "following_url": "https://api.github.com/users/Akuli/following{/other_user}",
      "gists_url": "https://api.github.com/users/Akuli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Akuli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Akuli/subscriptions",
      "organizations_url": "https://api.github.com/users/Akuli/orgs",
      "repos_url": "https://api.github.com/users/Akuli/repos",
      "events_url": "https://api.github.com/users/Akuli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Akuli/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "created_at": "2025-02-09T23:50:49Z",
    "updated_at": "2025-02-09T23:52:33Z",
    "author_association": "OWNER",
    "body": "`*` is the dereference operator in basically all languages that have pointers, so let's use that :)\n\n> If I use & as my prefix, for example, &foo.bar would be fine to me.\n\nThe problem is that `*foo.bar` already does a different thing. It is equivalent to `*(foo.bar)`, so it interprets `foo` as an instance of class and its field `bar` as a pointer. This is often quite useful. We cannot change the meaning of `*foo.bar` because then it would be different from C, and it would cause a lot of pain to anyone trying to port C code to Jou, or vice versa. C compatibility is important.\n\n---\n\n> A pointer deref prefix vs postfix.\n\nC and Jou have prefix dereference operators. Let's talk about suffix dereference operators. Zig has suffix dereference operator: you can write `foo.*.bar` to do the deference and member access. Or you can write `foo.bar` and it will automatically dereference for you.\n\nIf I add a suffix dereference operator to Jou, it will almost surely be `.*` because it's used in Zig and it feels like it makes sense.\n\nAdvantages of suffix dereference operator in Jou:\n- Very easy to implement in compiler\n- Very easy to understand\n- No need for separate `->` operator: simply use `foo.*.bar` instead of `foo->bar`\n\nDisadvantages of suffix dereference operator in Jou:\n- Different from Python's syntax (`*foo` has a different meaning in Python, but it's valid syntax)\n- Different from C\n\nSimilarity with Python and C is important. It's kinda the whole point of Jou :)\n\nSeems like we have 3 options, but which is best?\n1. Use prefix dereference operator (`*foo`)\n2. Use suffix dereference operator ( `foo.*`)\n3. Allow both",
    "reactions": {
      "url": "https://api.github.com/repos/Akuli/jou/issues/comments/2646660931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
